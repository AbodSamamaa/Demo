// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PointOfSale.Data.DBContext;

#nullable disable

namespace PointOfSale.Data.Migrations
{
    [DbContext(typeof(POINTOFSALEContext))]
    [Migration("20230916141409_fgkdm")]
    partial class fgkdm
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PointOfSale.Model.Category", b =>
                {
                    b.Property<int>("IdCategory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idCategory");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCategory"));

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("description");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<DateTime?>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("registrationDate")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("IdCategory")
                        .HasName("PK__Category__79D361B6930E16FF");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("PointOfSale.Model.CorrelativeNumber", b =>
                {
                    b.Property<int>("IdCorrelativeNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idCorrelativeNumber");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCorrelativeNumber"));

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("datetime")
                        .HasColumnName("dateUpdate");

                    b.Property<int?>("LastNumber")
                        .HasColumnType("int")
                        .HasColumnName("lastNumber");

                    b.Property<string>("Management")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("management");

                    b.Property<int?>("QuantityDigits")
                        .HasColumnType("int")
                        .HasColumnName("quantityDigits");

                    b.HasKey("IdCorrelativeNumber")
                        .HasName("PK__Correlat__D71CDFB02EFC51E4");

                    b.ToTable("CorrelativeNumber", (string)null);
                });

            modelBuilder.Entity("PointOfSale.Model.DetailPurchase", b =>
                {
                    b.Property<int>("IdDetailPurchase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDetailPurchase"));

                    b.Property<string>("BrandCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdCategory")
                        .HasColumnType("int");

                    b.Property<int?>("IdPurchase")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdDetailPurchase");

                    b.HasIndex("IdPurchase");

                    b.ToTable("DetailPurchases");
                });

            modelBuilder.Entity("PointOfSale.Model.DetailSale", b =>
                {
                    b.Property<int>("IdDetailSale")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idDetailSale");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDetailSale"));

                    b.Property<string>("BrandProduct")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("brandProduct");

                    b.Property<string>("CategoryProducty")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("categoryProducty");

                    b.Property<string>("DescriptionProduct")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("descriptionProduct");

                    b.Property<int?>("IdProduct")
                        .HasColumnType("int")
                        .HasColumnName("idProduct");

                    b.Property<int?>("IdSale")
                        .HasColumnType("int")
                        .HasColumnName("idSale");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("total");

                    b.HasKey("IdDetailSale")
                        .HasName("PK__DetailSa__D072342E21B249E9");

                    b.HasIndex("IdSale");

                    b.ToTable("DetailSale", (string)null);
                });

            modelBuilder.Entity("PointOfSale.Model.Menu", b =>
                {
                    b.Property<int>("IdMenu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idMenu");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMenu"));

                    b.Property<string>("Controller")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("controller");

                    b.Property<string>("Description")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("description");

                    b.Property<string>("Icon")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("icon");

                    b.Property<int?>("IdMenuParent")
                        .HasColumnType("int")
                        .HasColumnName("idMenuParent");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<string>("PageAction")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("pageAction");

                    b.Property<DateTime?>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("registrationDate")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("IdMenu")
                        .HasName("PK__Menu__C26AF48328C80B96");

                    b.HasIndex("IdMenuParent");

                    b.ToTable("Menu", (string)null);
                });

            modelBuilder.Entity("PointOfSale.Model.Negocio", b =>
                {
                    b.Property<int>("IdNegocio")
                        .HasColumnType("int")
                        .HasColumnName("idNegocio");

                    b.Property<string>("Correo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("correo");

                    b.Property<string>("Direccion")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("direccion");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.Property<string>("NombreLogo")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nombreLogo");

                    b.Property<string>("NumeroDocumento")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("numeroDocumento");

                    b.Property<decimal?>("PorcentajeImpuesto")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("porcentajeImpuesto");

                    b.Property<string>("SimboloMoneda")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("simboloMoneda");

                    b.Property<string>("Telefono")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("telefono");

                    b.Property<string>("UrlLogo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("urlLogo");

                    b.HasKey("IdNegocio")
                        .HasName("PK__Negocio__70E1E107B97CE30F");

                    b.ToTable("Negocio", (string)null);
                });

            modelBuilder.Entity("PointOfSale.Model.Payment", b =>
                {
                    b.Property<int?>("IdPayment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("IdPayment"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdPayment");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("PointOfSale.Model.Product", b =>
                {
                    b.Property<int>("IdProduct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idProduct");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProduct"));

                    b.Property<string>("BarCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("barCode");

                    b.Property<string>("Brand")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("brand");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("description");

                    b.Property<int?>("IdCategory")
                        .HasColumnType("int")
                        .HasColumnName("idCategory");

                    b.Property<int?>("IdTax")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("photo");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<DateTime?>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("registrationDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdProduct")
                        .HasName("PK__Product__5EEC79D18F8E118B");

                    b.HasIndex("IdCategory");

                    b.HasIndex("IdTax");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("PointOfSale.Model.Purchase", b =>
                {
                    b.Property<int>("IdPurchase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPurchase"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BarCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("IdCategory")
                        .HasColumnType("int");

                    b.Property<int?>("IdPaymentMethod")
                        .HasColumnType("int");

                    b.Property<int?>("IdTypeDocumentPurchase")
                        .HasColumnType("int");

                    b.Property<int?>("IdUsers")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PurchaseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SellerDocument")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SellerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalTaxes")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdPurchase");

                    b.HasIndex("IdCategory");

                    b.HasIndex("IdPaymentMethod");

                    b.HasIndex("IdTypeDocumentPurchase");

                    b.HasIndex("IdUsers");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("PointOfSale.Model.Rol", b =>
                {
                    b.Property<int>("IdRol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idRol");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRol"));

                    b.Property<string>("Description")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("description");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<DateTime?>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("registrationDate")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("IdRol")
                        .HasName("PK__Rol__3C872F76804F2E15");

                    b.ToTable("Rol", (string)null);
                });

            modelBuilder.Entity("PointOfSale.Model.RolMenu", b =>
                {
                    b.Property<int>("IdRolMenu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idRolMenu");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRolMenu"));

                    b.Property<int?>("IdMenu")
                        .HasColumnType("int")
                        .HasColumnName("idMenu");

                    b.Property<int?>("IdRol")
                        .HasColumnType("int")
                        .HasColumnName("idRol");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<DateTime?>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("registrationDate")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("IdRolMenu")
                        .HasName("PK__RolMenu__CD2045D86DACA6AF");

                    b.HasIndex("IdMenu");

                    b.HasIndex("IdRol");

                    b.ToTable("RolMenu", (string)null);
                });

            modelBuilder.Entity("PointOfSale.Model.Sale", b =>
                {
                    b.Property<int>("IdSale")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idSale");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSale"));

                    b.Property<string>("ClientName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("clientName");

                    b.Property<string>("CustomerDocument")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("customerDocument");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("IdTypeDocumentSale")
                        .HasColumnType("int")
                        .HasColumnName("idTypeDocumentSale");

                    b.Property<int?>("IdUsers")
                        .HasColumnType("int")
                        .HasColumnName("idUsers");

                    b.Property<DateTime?>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("registrationDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("SaleNumber")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("saleNumber");

                    b.Property<decimal?>("Subtotal")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("total");

                    b.Property<decimal?>("TotalTaxes")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("totalTaxes");

                    b.HasKey("IdSale")
                        .HasName("PK__Sale__C4AEB198091B7829");

                    b.HasIndex("IdTypeDocumentSale");

                    b.HasIndex("IdUsers");

                    b.ToTable("Sale", (string)null);
                });

            modelBuilder.Entity("PointOfSale.Model.Tax", b =>
                {
                    b.Property<int>("IdTax")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTax"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsExternal")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsFixed")
                        .HasColumnType("bit");

                    b.Property<float?>("Percentage")
                        .HasColumnType("real");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdTax");

                    b.ToTable("Tax");
                });

            modelBuilder.Entity("PointOfSale.Model.TypeDocumentPurchase", b =>
                {
                    b.Property<int>("IdTypeDocumentPurchase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTypeDocumentPurchase"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdTypeDocumentPurchase");

                    b.ToTable("TypeDocumentPurchases");
                });

            modelBuilder.Entity("PointOfSale.Model.TypeDocumentSale", b =>
                {
                    b.Property<int>("IdTypeDocumentSale")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idTypeDocumentSale");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTypeDocumentSale"));

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("description");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<DateTime?>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("registrationDate")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("IdTypeDocumentSale")
                        .HasName("PK__TypeDocu__18211B893F81F3B8");

                    b.ToTable("TypeDocumentSale", (string)null);
                });

            modelBuilder.Entity("PointOfSale.Model.User", b =>
                {
                    b.Property<int>("IdUsers")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idUsers");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUsers"));

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<int?>("IdRol")
                        .HasColumnType("int")
                        .HasColumnName("idRol");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("phone");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("photo");

                    b.Property<DateTime?>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("registrationDate")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("IdUsers")
                        .HasName("PK__Users__981CF2B10C1B1086");

                    b.HasIndex("IdRol");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PointOfSale.Model.DetailPurchase", b =>
                {
                    b.HasOne("PointOfSale.Model.Purchase", "IdPurchaseNavigation")
                        .WithMany("DetailPurchases")
                        .HasForeignKey("IdPurchase");

                    b.Navigation("IdPurchaseNavigation");
                });

            modelBuilder.Entity("PointOfSale.Model.DetailSale", b =>
                {
                    b.HasOne("PointOfSale.Model.Sale", "IdSaleNavigation")
                        .WithMany("DetailSales")
                        .HasForeignKey("IdSale")
                        .HasConstraintName("FK__DetailSal__idSal__300424B4");

                    b.Navigation("IdSaleNavigation");
                });

            modelBuilder.Entity("PointOfSale.Model.Menu", b =>
                {
                    b.HasOne("PointOfSale.Model.Menu", "IdMenuParentNavigation")
                        .WithMany("InverseIdMenuParentNavigation")
                        .HasForeignKey("IdMenuParent")
                        .HasConstraintName("FK__Menu__idMenuPare__108B795B");

                    b.Navigation("IdMenuParentNavigation");
                });

            modelBuilder.Entity("PointOfSale.Model.Product", b =>
                {
                    b.HasOne("PointOfSale.Model.Category", "IdCategoryNavigation")
                        .WithMany("Products")
                        .HasForeignKey("IdCategory")
                        .HasConstraintName("FK__Product__idCateg__22AA2996");

                    b.HasOne("PointOfSale.Model.Tax", "IdTaxNavigation")
                        .WithMany("Products")
                        .HasForeignKey("IdTax");

                    b.Navigation("IdCategoryNavigation");

                    b.Navigation("IdTaxNavigation");
                });

            modelBuilder.Entity("PointOfSale.Model.Purchase", b =>
                {
                    b.HasOne("PointOfSale.Model.Category", "IdCategoryNavigation")
                        .WithMany()
                        .HasForeignKey("IdCategory");

                    b.HasOne("PointOfSale.Model.Payment", "IdPaymentMethodNavigation")
                        .WithMany()
                        .HasForeignKey("IdPaymentMethod");

                    b.HasOne("PointOfSale.Model.TypeDocumentPurchase", "IdTypeDocumentNavigation")
                        .WithMany("Purchases")
                        .HasForeignKey("IdTypeDocumentPurchase");

                    b.HasOne("PointOfSale.Model.User", "IdUsersNavigation")
                        .WithMany()
                        .HasForeignKey("IdUsers");

                    b.Navigation("IdCategoryNavigation");

                    b.Navigation("IdPaymentMethodNavigation");

                    b.Navigation("IdTypeDocumentNavigation");

                    b.Navigation("IdUsersNavigation");
                });

            modelBuilder.Entity("PointOfSale.Model.RolMenu", b =>
                {
                    b.HasOne("PointOfSale.Model.Menu", "IdMenuNavigation")
                        .WithMany("RolMenus")
                        .HasForeignKey("IdMenu")
                        .HasConstraintName("FK__RolMenu__idMenu__182C9B23");

                    b.HasOne("PointOfSale.Model.Rol", "IdRolNavigation")
                        .WithMany("RolMenus")
                        .HasForeignKey("IdRol")
                        .HasConstraintName("FK__RolMenu__idRol__173876EA");

                    b.Navigation("IdMenuNavigation");

                    b.Navigation("IdRolNavigation");
                });

            modelBuilder.Entity("PointOfSale.Model.Sale", b =>
                {
                    b.HasOne("PointOfSale.Model.TypeDocumentSale", "IdTypeDocumentSaleNavigation")
                        .WithMany("Sales")
                        .HasForeignKey("IdTypeDocumentSale")
                        .HasConstraintName("FK__Sale__idTypeDocu__2B3F6F97");

                    b.HasOne("PointOfSale.Model.User", "IdUsersNavigation")
                        .WithMany("Sales")
                        .HasForeignKey("IdUsers")
                        .HasConstraintName("FK__Sale__idUsers__2C3393D0");

                    b.Navigation("IdTypeDocumentSaleNavigation");

                    b.Navigation("IdUsersNavigation");
                });

            modelBuilder.Entity("PointOfSale.Model.User", b =>
                {
                    b.HasOne("PointOfSale.Model.Rol", "IdRolNavigation")
                        .WithMany("Users")
                        .HasForeignKey("IdRol")
                        .HasConstraintName("FK__Users__idRol__1BFD2C07");

                    b.Navigation("IdRolNavigation");
                });

            modelBuilder.Entity("PointOfSale.Model.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("PointOfSale.Model.Menu", b =>
                {
                    b.Navigation("InverseIdMenuParentNavigation");

                    b.Navigation("RolMenus");
                });

            modelBuilder.Entity("PointOfSale.Model.Purchase", b =>
                {
                    b.Navigation("DetailPurchases");
                });

            modelBuilder.Entity("PointOfSale.Model.Rol", b =>
                {
                    b.Navigation("RolMenus");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("PointOfSale.Model.Sale", b =>
                {
                    b.Navigation("DetailSales");
                });

            modelBuilder.Entity("PointOfSale.Model.Tax", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("PointOfSale.Model.TypeDocumentPurchase", b =>
                {
                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("PointOfSale.Model.TypeDocumentSale", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("PointOfSale.Model.User", b =>
                {
                    b.Navigation("Sales");
                });
#pragma warning restore 612, 618
        }
    }
}
